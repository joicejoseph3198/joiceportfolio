{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport LocomotiveScroll from 'locomotive-scroll';\nimport 'locomotive-scroll/src/locomotive-scroll.scss';\nimport ScrollTrigger from 'gsap/ScrollTrigger';\nimport gsap from 'gsap';\ngsap.registerPlugin(ScrollTrigger);\nexport default function useLocoScroll(start) {\n  _s();\n\n  useEffect(() => {\n    if (!start) return;\n    const scrollEl = document.querySelector('#main-container');\n    let locoScroll = new LocomotiveScroll({\n      el: scrollEl,\n      smooth: true,\n      smartphone: {\n        smooth: false\n      },\n      tablet: {\n        smooth: false\n      },\n      multiplier: 1,\n      class: 'is-reveal'\n    });\n    locoScroll.on('scroll', () => {\n      ScrollTrigger.update();\n    });\n    ScrollTrigger.scrollerProxy(scrollEl, {\n      scrollTop(value) {\n        if (locoScroll) {\n          return arguments.length ? locoScroll.scrollTo(value, 0, 0) : locoScroll.scroll.instance.scroll.y;\n        }\n\n        return null;\n      },\n\n      scrollLeft(value) {\n        if (locoScroll) {\n          return arguments.length ? locoScroll.scrollTo(value, 0, 0) : locoScroll.scroll.instance.scroll.x;\n        }\n\n        return null;\n      }\n\n    });\n\n    const lsUpdate = () => {\n      if (locoScroll) {\n        locoScroll.update();\n      }\n    };\n\n    ScrollTrigger.addEventListener('refresh', lsUpdate);\n    ScrollTrigger.refresh();\n    return () => {\n      if (locoScroll) {\n        ScrollTrigger.removeEventListener('refresh', lsUpdate);\n        locoScroll.destroy();\n        locoScroll = null;\n      }\n    };\n  }, [start]);\n}\n\n_s(useLocoScroll, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["H:/Web Dev/React Learning/web-1/src/components/hooks/useLocoScroll.js"],"names":["useEffect","LocomotiveScroll","ScrollTrigger","gsap","registerPlugin","useLocoScroll","start","scrollEl","document","querySelector","locoScroll","el","smooth","smartphone","tablet","multiplier","class","on","update","scrollerProxy","scrollTop","value","arguments","length","scrollTo","scroll","instance","y","scrollLeft","x","lsUpdate","addEventListener","refresh","removeEventListener","destroy"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAO,8CAAP;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAA,IAAI,CAACC,cAAL,CAAoBF,aAApB;AAEA,eAAe,SAASG,aAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AACxCN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACM,KAAJ,EAAW;AAEX,UAAMC,QAAQ,GAAEC,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAAhB;AAEA,QAAIC,UAAU,GAAG,IAAIT,gBAAJ,CAAqB;AAClCU,MAAAA,EAAE,EAAEJ,QAD8B;AAElCK,MAAAA,MAAM,EAAE,IAF0B;AAGlCC,MAAAA,UAAU,EAAE;AACRD,QAAAA,MAAM,EAAE;AADA,OAHsB;AAMlCE,MAAAA,MAAM,EAAE;AACJF,QAAAA,MAAM,EAAE;AADJ,OAN0B;AASlCG,MAAAA,UAAU,EAAE,CATsB;AAUlCC,MAAAA,KAAK,EAAE;AAV2B,KAArB,CAAjB;AAYAN,IAAAA,UAAU,CAACO,EAAX,CAAc,QAAd,EAAwB,MAAK;AACzBf,MAAAA,aAAa,CAACgB,MAAd;AACH,KAFD;AAIAhB,IAAAA,aAAa,CAACiB,aAAd,CAA4BZ,QAA5B,EAAqC;AACjCa,MAAAA,SAAS,CAACC,KAAD,EAAO;AACZ,YAAGX,UAAH,EAAe;AACX,iBAAOY,SAAS,CAACC,MAAV,GACLb,UAAU,CAACc,QAAX,CAAoBH,KAApB,EAA0B,CAA1B,EAA4B,CAA5B,CADK,GAELX,UAAU,CAACe,MAAX,CAAkBC,QAAlB,CAA2BD,MAA3B,CAAkCE,CAFpC;AAGH;;AACD,eAAO,IAAP;AACH,OARgC;;AASjCC,MAAAA,UAAU,CAACP,KAAD,EAAO;AACb,YAAIX,UAAJ,EAAgB;AACZ,iBAAOY,SAAS,CAACC,MAAV,GAAmBb,UAAU,CAACc,QAAX,CAAoBH,KAApB,EAA0B,CAA1B,EAA4B,CAA5B,CAAnB,GACLX,UAAU,CAACe,MAAX,CAAkBC,QAAlB,CAA2BD,MAA3B,CAAkCI,CADpC;AAEH;;AACD,eAAO,IAAP;AACH;;AAfgC,KAArC;;AAkBA,UAAMC,QAAQ,GAAG,MAAM;AACnB,UAAGpB,UAAH,EAAc;AACVA,QAAAA,UAAU,CAACQ,MAAX;AACH;AACJ,KAJD;;AAMAhB,IAAAA,aAAa,CAAC6B,gBAAd,CAA+B,SAA/B,EAA0CD,QAA1C;AACA5B,IAAAA,aAAa,CAAC8B,OAAd;AAEA,WAAO,MAAM;AACT,UAAGtB,UAAH,EAAe;AACXR,QAAAA,aAAa,CAAC+B,mBAAd,CAAkC,SAAlC,EAA6CH,QAA7C;AACApB,QAAAA,UAAU,CAACwB,OAAX;AACAxB,QAAAA,UAAU,GAAG,IAAb;AACH;AACJ,KAND;AAQH,GAxDQ,EAwDN,CAACJ,KAAD,CAxDM,CAAT;AAyDH;;GA1DuBD,a","sourcesContent":["import {useEffect} from 'react';\r\nimport LocomotiveScroll from 'locomotive-scroll';\r\nimport 'locomotive-scroll/src/locomotive-scroll.scss';\r\nimport ScrollTrigger from 'gsap/ScrollTrigger';\r\nimport gsap from 'gsap';\r\n\r\ngsap.registerPlugin(ScrollTrigger);\r\n\r\nexport default function useLocoScroll(start){\r\n    useEffect(() => {\r\n        if(!start) return;\r\n\r\n        const scrollEl= document.querySelector('#main-container');\r\n\r\n        let locoScroll = new LocomotiveScroll({\r\n            el: scrollEl,\r\n            smooth: true,\r\n            smartphone: {\r\n                smooth: false\r\n            },\r\n            tablet: {\r\n                smooth: false\r\n            },\r\n            multiplier: 1,\r\n            class: 'is-reveal',\r\n        });\r\n        locoScroll.on('scroll', ()=> {\r\n            ScrollTrigger.update(); \r\n        });\r\n\r\n        ScrollTrigger.scrollerProxy(scrollEl,{\r\n            scrollTop(value){\r\n                if(locoScroll) {\r\n                    return arguments.length \r\n                    ? locoScroll.scrollTo(value,0,0)\r\n                    : locoScroll.scroll.instance.scroll.y;\r\n                }\r\n                return null;\r\n            },\r\n            scrollLeft(value){\r\n                if (locoScroll) {\r\n                    return arguments.length ? locoScroll.scrollTo(value,0,0)\r\n                    : locoScroll.scroll.instance.scroll.x;\r\n                }\r\n                return null;\r\n            },\r\n        });\r\n\r\n        const lsUpdate = () => {\r\n            if(locoScroll){\r\n                locoScroll.update();\r\n            }\r\n        }\r\n\r\n        ScrollTrigger.addEventListener('refresh', lsUpdate);\r\n        ScrollTrigger.refresh();\r\n\r\n        return () => {\r\n            if(locoScroll) {\r\n                ScrollTrigger.removeEventListener('refresh', lsUpdate);\r\n                locoScroll.destroy();\r\n                locoScroll = null;\r\n            }\r\n        };\r\n\r\n    }, [start]);\r\n}"]},"metadata":{},"sourceType":"module"}