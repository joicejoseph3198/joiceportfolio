{"ast":null,"code":"var _jsxFileName = \"H:\\\\Web Dev\\\\React Learning\\\\web-1\\\\src\\\\components\\\\Gallery\\\\index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport \"./style.scss\";\nimport { gsap } from 'gsap';\nimport useOnScreen from \"../hooks/useOnScreen\";\nimport ScrollTrigger from 'gsap/ScrollTrigger';\nimport cn from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projects = [{\n  title: \"Object Detection\",\n  description: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  category: \"Object Detection, Yolov5\"\n}, {\n  title: \"Image Classification\",\n  description: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  category: \"Classification, Transfer Learning\"\n}, {\n  title: \"Prediction\",\n  description: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \",\n  category: \"Regression, XGBoost\"\n}, {\n  title: \"Visualization\",\n  description: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  category: \"EDA, Visualization\"\n}];\n\nfunction GalleryItem({\n  category,\n  description,\n  title,\n  updateActiveProject,\n  index\n}) {\n  _s();\n\n  const ref = useRef(null);\n  const onScreen = useOnScreen(ref, 0.5);\n  useEffect(() => {\n    if (onScreen) {\n      updateActiveProject(index);\n    }\n  }, [onScreen, index, updateActiveProject]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn(\"gallery-item-wrapper\", {\n      'is-reveal': onScreen\n    }),\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery-item\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-item-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"gallery-item-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"gallery-item-description\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"gallery-item-category\",\n          children: category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GalleryItem, \"C24v27s8pEpvy0yrRPVKOkoWGg4=\", false, function () {\n  return [useOnScreen];\n});\n\n_c = GalleryItem;\nexport default function Gallery({\n  index,\n  columnOffset\n}) {\n  _s2();\n\n  const [activeProject, setActiveProject] = useState(1);\n  const ref = useRef(null);\n\n  const handleUpdateActiveProject = index => {\n    setActiveProject(index + 1);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(ref.current.offsetWidth);\n      console.log(ref.current.clientWidth);\n      console.log({\n        current: ref.current\n      });\n      let sections = gsap.utils.toArray(\".gallery-item-wrapper\");\n      gsap.to(sections, {\n        xPercent: -100 * (sections.length - 1),\n        ease: 'none',\n        scrollTrigger: {\n          start: 'top top',\n          trigger: ref.current,\n          scroller: '#main-container',\n          pin: true,\n          scrub: 0.5,\n          span: 1 / (sections.length - 1),\n          end: () => `+=${ref.current.offsetWidth}`\n        }\n      });\n      ScrollTrigger.refresh();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    \"data-scroll-section\": true,\n    className: \"section-wrapper gallery-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery-heading\",\n      children: \"Projects I have worked on\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery\",\n      ref: ref,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-counter\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: activeProject\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: projects.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), projects.map((project, index) => /*#__PURE__*/_jsxDEV(GalleryItem, {\n        index: index,\n        ...project,\n        updateActiveProject: handleUpdateActiveProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Gallery, \"a/uAPLhf3kF0fsHvkBkkz/gnflk=\");\n\n_c2 = Gallery;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GalleryItem\");\n$RefreshReg$(_c2, \"Gallery\");","map":{"version":3,"sources":["H:/Web Dev/React Learning/web-1/src/components/Gallery/index.js"],"names":["React","useState","useEffect","useRef","gsap","useOnScreen","ScrollTrigger","cn","projects","title","description","category","GalleryItem","updateActiveProject","index","ref","onScreen","Gallery","columnOffset","activeProject","setActiveProject","handleUpdateActiveProject","setTimeout","console","log","current","offsetWidth","clientWidth","sections","utils","toArray","to","xPercent","length","ease","scrollTrigger","start","trigger","scroller","pin","scrub","span","end","refresh","map","project"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport \"./style.scss\";\r\nimport {gsap} from 'gsap';\r\nimport useOnScreen from \"../hooks/useOnScreen\"\r\nimport ScrollTrigger from 'gsap/ScrollTrigger';\r\nimport cn from 'classnames';\r\n\r\n\r\nconst projects = [\r\n    {\r\n        \r\n        title: \"Object Detection\",\r\n        description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\r\n        category:\"Object Detection, Yolov5\"\r\n    },\r\n\r\n    {\r\n        \r\n        title: \"Image Classification\",\r\n        description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\r\n        category:\"Classification, Transfer Learning\"\r\n    },\r\n    {\r\n        \r\n        title: \"Prediction\",\r\n        description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \",\r\n        category:\"Regression, XGBoost\"\r\n    },\r\n    {\r\n        \r\n        title: \"Visualization\",\r\n        description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\r\n        category:\"EDA, Visualization\"\r\n    },\r\n];\r\n\r\nfunction GalleryItem({category,description,title,updateActiveProject,index}){\r\n    \r\n    const ref = useRef(null);\r\n\r\n    const onScreen = useOnScreen(ref, 0.5);\r\n\r\n    useEffect(() => {\r\n        if(onScreen) {\r\n            updateActiveProject(index);\r\n        }\r\n    }, [onScreen, index, updateActiveProject]);\r\n    return (\r\n        <div className={cn(\"gallery-item-wrapper\", {'is-reveal':onScreen})}\r\n        ref={ref}\r\n        >  \r\n            <div className=\"gallery-item\">\r\n                <div className=\"gallery-item-info\">\r\n                    <h1 className=\"gallery-item-title\">{title}</h1>\r\n                    <h6 className=\"gallery-item-description\">{description}</h6>\r\n                    <p className=\"gallery-item-category\">{category}</p>\r\n                </div> \r\n            </div>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function Gallery({index, columnOffset}) {\r\n    const [activeProject,setActiveProject] = useState(1);\r\n    const ref = useRef(null);\r\n    \r\n    const handleUpdateActiveProject = (index) => {\r\n        setActiveProject(index + 1);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        setTimeout(()=> {\r\n            console.log(ref.current.offsetWidth);\r\n            console.log(ref.current.clientWidth);\r\n            console.log({ current: ref.current });\r\n            let sections = gsap.utils.toArray(\".gallery-item-wrapper\");\r\n            \r\n            gsap.to(sections, {\r\n                xPercent: -100 * (sections.length-1),\r\n                ease: 'none',\r\n                scrollTrigger: {\r\n                    start : 'top top',\r\n                    trigger: ref.current,\r\n                    scroller: '#main-container',\r\n                    pin: true,\r\n                    scrub: 0.5,\r\n                    span: 1/(sections.length-1),\r\n                    end: ()=> `+=${ref.current.offsetWidth}`,\r\n\r\n                },\r\n            });\r\n            ScrollTrigger.refresh();\r\n        });\r\n    }, []);\r\n\r\n    \r\n\r\n    return(\r\n        <section data-scroll-section className=\"section-wrapper gallery-wrap\" >\r\n             <div className=\"gallery-heading\">\r\n                    Projects I have worked on\r\n            </div>\r\n            \r\n            <div className=\"gallery\" ref= {ref}>\r\n                <div className=\"gallery-counter\">\r\n                    <span>{activeProject}</span>\r\n                    <span className=\"divider\"/>\r\n                    <span>{projects.length}</span>\r\n                </div>\r\n                {projects.map((project,index) => (\r\n                    <GalleryItem\r\n                        index={index}\r\n                        {...project}\r\n                        updateActiveProject = {handleUpdateActiveProject}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </section>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}